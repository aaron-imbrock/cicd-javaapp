name: Release to Docker Hub if tests OK (CI/CD)

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Increment version
        id: version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Read current version
          if [ -f "version.txt" ]; then
            VERSION=$(cat version.txt)
            echo "Current version: $VERSION"
          else
            # Initialize version file if it doesn't exist
            VERSION="0.0.0"
            echo "Initializing version to: $VERSION"
          fi
          
          # Split into major, minor, patch
          if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            
            # Save back to file
            echo "$NEW_VERSION" > version.txt
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Incremented to: $NEW_VERSION"
            
            # Commit the version update
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add version.txt
            git commit -m "Bump version to $NEW_VERSION [skip ci]"
            git push
          else
            echo "Initializing with version 0.0.1"
            echo "0.0.1" > version.txt
            echo "new_version=0.0.1" >> $GITHUB_OUTPUT
            
            # Commit the version file
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add version.txt
            git commit -m "Initialize version file [skip ci]"
            git push
          fi
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
          tags: |
            type=raw,value=v${{ steps.version.outputs.new_version }},enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.version.outputs.new_version != '' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with: 
          path: /tmp/.buildx-cache
          key:  ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build app and run tests in Docker
        uses: docker/build-push-action@v4
        with:
          file: Dockerfile.multistage
          target: run-test-stage
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push release to Docker Hub
        uses: docker/build-push-action@v6
        if: github.event_name != 'pull_request'
        with:
          push: true
          file: Dockerfile.multistage
          target: build-release-stage
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache
